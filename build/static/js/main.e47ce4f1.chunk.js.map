{"version":3,"sources":["actions/users.js","ws/ws.js","UsersListTable.js","UsersCreateForm.js","containers/App.js","serviceWorker.js","reducers/rootReducer.js","reducers/users.js","index.js"],"names":["usersFetchData","url","dispatch","fetch","then","response","ok","Error","statusText","json","users","type","usersFetchDataSuccess","catch","stompClient","handlers","UsersListTable","state","id","name","age","country","handleChange","bind","event","target","value","this","setState","send","JSON","stringify","sendUsers","className","scope","props","map","user","key","data-toggle","data-target","data-whatever","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","onChange","placeholder","onClick","method","headers","body","result","data","console","log","err","window","confirm","React","Component","connect","fetchData","UsersCreateForm","handleSubmit","mode","App","socket","SockJS","Stomp","over","frame","subscribe","forEach","handler","parse","connectTo","Boolean","location","hostname","match","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e47ce4f1.chunk.js","sourcesContent":["export function usersFetchDataSuccess(users) {\n    return {\n        type: \"USERS_FETCH_DATA_SUCCESS\",\n        users\n    }\n}\n\nexport function usersFetchData(url) {\n    return (dispatch) => {\n        fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n                return response;\n            })\n            .then(response => response.json())\n            .then(users => dispatch(usersFetchDataSuccess(users)))\n            .catch(() => {\n            });\n    }\n}","import SockJS from 'sockjs-client'\nimport {Stomp} from '@stomp/stompjs'\n\n\nlet stompClient = null;\nconst handlers = [];\n\nexport function connectTo() {\n    const socket = new SockJS('/gs-guide-websocket');\n    stompClient = Stomp.over(socket);\n    stompClient.connect({}, frame => {\n        console.log('Connected: ' + frame);\n        stompClient.subscribe('/topic/users', users => {\n            handlers.forEach(handler => handler(JSON.parse(users.body)))\n        });\n    });\n}\n\nexport function disconnect() {\n    if (stompClient !== null) {\n        stompClient.disconnect();\n    }\n    console.log(\"Disconnected\");\n}\n\nexport function sendUsers(users) {\n    stompClient.send(\"http://localhost:8080/changeUsers\", {}, JSON.stringify(users));\n}","import React from 'react';\nimport {usersFetchData} from \"../src/actions/users.js\";\nimport {connect} from \"react-redux\";\nimport form from \"@jest/fake-timers/build/jestFakeTimers\";\nimport {sendUsers} from \"./ws/ws\";\n\nclass UsersListTable extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            id: '',\n            name: '',\n            age: '',\n            country: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        let target = event.target;\n        let value = target.value;\n        let id = target.id;\n        this.setState({\n            [id]: value\n        });\n        this.setState({\n            id: event.target.value\n        });\n    }\n\n    render() {\n\n        sendUsers({id: this.id, name: this.name, age: this.age, country: this.country});\n\n        const handleUpdateUser = id => {\n            fetch('http://localhost:8080/users/' + id, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        name: this.state.name,\n                        age: this.state.age,\n                        country: this.state.country\n                    })\n                }\n            ).then(result => result.json()).then(data => console.log(data)).catch(err => console.log(err));\n        };\n\n        const handleDeleteUser = id => {\n            let answer = window.confirm('Вы уверены, что хотите удалить пользователя?');\n            if (answer) {\n                fetch('http://localhost:8080/users/' + id,\n                    {method: 'DELETE'}).then(result => console.log(result))\n            }\n        };\n\n        return (\n            <div className=\"users-list-table\">\n                <table className=\"table table-hover\">\n                    <thead className=\"thead-dark\">\n                    <tr>\n                        <th scope=\"col\">ID</th>\n                        <th scope=\"col\">Имя</th>\n                        <th scope=\"col\">Возраст</th>\n                        <th scope=\"col\">Страна</th>\n                        <th scope=\"col\">Действия</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.props.users.map((user => {\n                        return <tr key={user.id}>\n                            <th className=\"id-user-td\" scope=\"row\">{user.id}</th>\n                            <td className=\"name-td\">{user.name}</td>\n                            <td className=\"age-td\">{user.age}</td>\n                            <td className=\"country-td\">{user.country}</td>\n                            <td className=\"actions-td\">\n                                <div className=\"edit-user-icon\">\n                                    <ion-icon name=\"create\" id=\"edit-user-icon\" data-toggle=\"modal\"\n                                              data-target=\"#edit-user-modal\"\n                                              data-whatever=\"edit-user\" /*onClick={() => {this.props.users.map((user => { return <tr key={user.id}/>}))}}*/\n                                    />\n                                    <div className=\"modal fade\" id=\"edit-user-modal\" tabIndex=\"-1\" role=\"dialog\"\n                                         aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                        <div className=\"modal-dialog\" role=\"document\">\n                                            <div className=\"modal-content\">\n                                                <div className=\"modal-header\">\n                                                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">Редактировать\n                                                        пользователя</h5>\n                                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\"\n                                                            aria-label=\"Close\">\n                                                        <span aria-hidden=\"true\">&times;</span>\n                                                    </button>\n                                                </div>\n                                                <div className=\"modal-body\">\n                                                    {/*<h3>Редактировать пользователя</h3>*/}\n                                                    <form>\n                                                        <div className=\"form-user-name\"><br/>\n                                                            <label className=\"label-name\">Имя пользователя</label><br/>\n                                                            <input type=\"text\" className=\"form-control\" id=\"name\"\n                                                                   value={this.state.name}\n                                                                   onChange={this.handleChange}\n                                                                   placeholder=\"Введите имя\"/>\n                                                        </div>\n                                                        <div className=\"form-user-age\"><br/>\n                                                            <label className=\"label-age\">Возраст</label><br/>\n                                                            <input type=\"text\" className=\"form-control\" id=\"age\"\n                                                                   value={this.state.age}\n                                                                   onChange={this.handleChange}\n                                                                   placeholder=\"Введите возраст\"/>\n                                                        </div>\n                                                        <br/>\n                                                        <div className=\"form-user-country\">\n                                                            <label className=\"label-country\">Страна</label><br/>\n                                                            <input type=\"text\" className=\"form-control\" id=\"country\"\n                                                                   value={this.state.country}\n                                                                   onChange={this.handleChange}\n                                                                   placeholder=\"Введите страну\"/>\n                                                        </div>\n                                                        <br/>\n                                                    </form>\n                                                </div>\n                                                <div className=\"modal-footer\">\n                                                    <button type=\"button\" className=\"btn btn-secondary\"\n                                                            data-dismiss=\"modal\"\n                                                            id=\"btn-create-user-cancel\">Отмена\n                                                    </button>\n                                                    <button type=\"button\" className=\"btn btn-primary\"\n                                                            id=\"btn-update-user\" data-dismiss=\"modal\"\n                                                            onClick={() => handleUpdateUser(user.id)}>Редактировать\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"delete-user-icon\">\n                                    <ion-icon name=\"close\" id=\"delete-user-icon\"\n                                              onClick={() => handleDeleteUser(user.id)}/>\n                                </div>\n                            </td>\n                        </tr>\n                    }))\n                    }\n                    <tr>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: url => dispatch(usersFetchData(url))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersListTable);","import React from 'react';\nimport form from \"@jest/fake-timers/build/jestFakeTimers\";\n\nclass UsersCreateForm extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            name: '',\n            age: '',\n            country: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        let target = event.target;\n        let value = target.value;\n        let id = target.id;\n        this.setState({\n            [id]: value\n        });\n        this.setState({\n            id: event.target.value\n        });\n    }\n\n    handleSubmit() {\n        fetch('http://localhost:8080/users/',\n            {\n                method: 'POST',\n                mode: 'no-cors',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    name: this.state.name,\n                    age: this.state.age,\n                    country: this.state.country\n                })\n            }\n        ).then(result => result.json()).then(data => console.log(data)).catch(err => console.log(err));\n    }\n\n    render() {\n        return (\n            <div className=\"users-create-form\">\n                <div className=\"button-user-create\">\n                    <button type=\"button\" className=\"btn btn-primary\" id=\"create-user-btn\" data-toggle=\"modal\"\n                            data-target=\"#create-user-modal\"\n                            data-whatever=\"create-user\">Добавить пользователя\n                    </button>\n                </div>\n\n                <div className=\"modal fade\" id=\"create-user-modal\" tabIndex=\"-1\" role=\"dialog\"\n                     aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                    <div className=\"modal-dialog\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-header\">\n                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Создать пользователя</h5>\n                                <button type=\"button\" className=\"close\" id=\"create-close-cross\" data-dismiss=\"modal\"\n                                        aria-label=\"Close\">\n                                    <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                            </div>\n                            <div className=\"modal-body\">\n                                {/*<h3>Создать пользователя</h3>*/}\n                                <form>\n                                    <div className=\"form-user-name\"><br/>\n                                        <label className=\"label-name\">Имя пользователя</label><br/>\n                                        <input type=\"text\" className=\"form-control\" id=\"name\" value={this.state.name}\n                                               onChange={this.handleChange}\n                                               placeholder=\"Введите имя\"/>\n                                    </div>\n                                    <div className=\"form-user-age\"><br/>\n                                        <label className=\"label-age\">Возраст</label><br/>\n                                        <input type=\"text\" className=\"form-control\" id=\"age\" value={this.state.age}\n                                               onChange={this.handleChange}\n                                               placeholder=\"Введите возраст\"/>\n                                    </div>\n                                    <br/>\n                                    <div className=\"form-user-country\">\n                                        <label className=\"label-country\">Страна</label><br/>\n                                        <input type=\"text\" className=\"form-control\" id=\"country\"\n                                               value={this.state.country} onChange={this.handleChange}\n                                               placeholder=\"Введите страну\"/>\n                                    </div>\n                                    <br/>\n                                </form>\n                            </div>\n                            <div className=\"modal-footer\">\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\"\n                                        id=\"btn-create-user-cancel\">Отмена\n                                </button>\n                                <button type=\"button\" className=\"btn btn-primary\" id=\"btn-create-user\" data-dismiss=\"modal\"\n                                        onClick={this.handleSubmit}>Создать\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UsersCreateForm;","import React from 'react';\nimport '../containers/App.css';\nimport {connect} from \"react-redux\"\nimport {usersFetchData} from \"../actions/users.js\";\nimport UsersListTable from \"../UsersListTable\";\nimport UsersCreateForm from \"../UsersCreateForm\";\nimport {connectTo} from '../ws/ws'\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.fetchData(\"http://localhost:8080/users\");\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"list-users\">\n                    <UsersListTable/>\n                </div>\n                <div className=\"create-user\">\n                    <UsersCreateForm/>\n                </div>\n            </div>\n        );\n    }\n}\n\nconnectTo();\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: url => dispatch(usersFetchData(url))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { users } from \"./users\";\n\nconst rootReducer = combineReducers({\n    users\n});\n\nexport default rootReducer;","export function users(state = [], action) {\n    if (action.type === \"USERS_FETCH_DATA_SUCCESS\") {\n        return action.users;\n    } else {\n        return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/containers/App.js';\nimport * as serviceWorker from '../src/serviceWorker';\n\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nif (module.hot) {\n    module.hot.accept('../src/containers/App.js', () => {\n        ReactDOM.render(<App/>, document.getElementById('root'));\n    });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}