{"version":3,"sources":["actions/users.js","components/ReloadPage.js","UsersListTable.js","UsersCreateForm.js","UsersBanner.js","containers/App.js","serviceWorker.js","reducers/rootReducer.js","reducers/users.js","index.js","images/banner.jpg"],"names":["usersFetchData","url","dispatch","fetch","then","response","ok","Error","statusText","json","users","type","usersFetchDataSuccess","catch","ReloadPage","result","data","console","log","err","setTimeout","window","location","reload","React","Component","UsersListTable","state","id","name","age","country","handleChange","bind","event","target","value","this","setState","className","scope","props","map","user","key","data-toggle","data-target","data-whatever","tabIndex","role","aria-labelledby","aria-hidden","data-dismiss","aria-label","onChange","placeholder","onClick","method","headers","body","JSON","stringify","handleList","confirm","connect","fetchData","UsersCreateForm","handleSubmit","handleCancelReset","mode","UsersBanner","src","banner","width","height","alt","activeClass","smooth","offset","duration","to","href","App","Boolean","hostname","match","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b318335f.chunk.js","sourcesContent":["export function usersFetchDataSuccess(users) {\n    return {\n        type: \"USERS_FETCH_DATA_SUCCESS\",\n        users\n    }\n}\n\nexport function usersFetchData(url) {\n    return (dispatch) => {\n        fetch(url)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error(response.statusText);\n                }\n                return response;\n            })\n            .then(response => response.json())\n            .then(users => dispatch(usersFetchDataSuccess(users)))\n            .catch(() => {\n            });\n    }\n}\n","import React from 'react';\n\nclass ReloadPage extends React.Component {\n\n    static handleList() {\n        fetch('http://localhost:8080/users/').then(result => result.json()).then(data => console.log(data)).catch(err => console.log(err));\n        setTimeout(function () {\n            window.location.reload()\n        }, 500);\n    };\n}\n\nexport default ReloadPage;","import React from 'react';\nimport {usersFetchData} from \"../src/actions/users.js\";\nimport {connect} from \"react-redux\";\nimport form from \"@jest/fake-timers/build/jestFakeTimers\";\nimport ReloadPage from \"./components/ReloadPage\";\n/*import {sendUsers} from \"./ws/ws\";*/\n\nclass UsersListTable extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            id: '',\n            name: '',\n            age: '',\n            country: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        let target = event.target;\n        let value = target.value;\n        let id = target.id;\n        this.setState({\n            [id]: value\n        });\n        this.setState({\n            id: event.target.value\n        });\n    }\n\n    render() {\n\n        const handleUpdateUser = id => {\n            fetch('http://localhost:8080/users/' + id, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        name: this.state.name,\n                        age: this.state.age,\n                        country: this.state.country\n                    })\n                }\n            ).then(result => result.json()).then(data => console.log(data)).catch(err => console.log(err));\n            ReloadPage.handleList();\n        };\n\n        const handleDeleteUser = id => {\n            let answer = window.confirm('Вы уверены, что хотите удалить пользователя?');\n            if (answer) {\n                fetch('http://localhost:8080/users/' + id,\n                    {method: 'DELETE'}).then(result => console.log(result));\n                ReloadPage.handleList();\n            }\n        };\n\n        return (\n            <div className=\"users-list-table\">\n                <table className=\"table table-hover\">\n                    <thead className=\"thead-dark\">\n                    <tr>\n                        <th scope=\"col\">ID</th>\n                        <th scope=\"col\">Имя</th>\n                        <th scope=\"col\">Возраст</th>\n                        <th scope=\"col\">Страна</th>\n                        <th scope=\"col\">Действия</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.props.users.map((user => {\n                        return <tr key={user.id}>\n                            <th className=\"id-user-td\" scope=\"row\">{user.id}</th>\n                            <td className=\"name-td\">{user.name}</td>\n                            <td className=\"age-td\">{user.age}</td>\n                            <td className=\"country-td\">{user.country}</td>\n                            <td className=\"actions-td\">\n                                <div className=\"edit-user-icon\">\n                                    <ion-icon name=\"create\" id=\"edit-user-icon\" data-toggle=\"modal\"\n                                              data-target=\"#edit-user-modal\"\n                                              data-whatever=\"edit-user\" /*onClick={() => {this.props.users.map((user => { return <tr key={user.id}/>}))}}*/\n                                    />\n                                    <div className=\"modal fade\" id=\"edit-user-modal\" tabIndex=\"-1\" role=\"dialog\"\n                                         aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                                        <div className=\"modal-dialog\" role=\"document\">\n                                            <div className=\"modal-content\">\n                                                <div className=\"modal-header\">\n                                                    <h5 className=\"modal-title\" id=\"exampleModalLabel\">Редактировать\n                                                        пользователя</h5>\n                                                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\"\n                                                            aria-label=\"Close\">\n                                                        <span aria-hidden=\"true\">&times;</span>\n                                                    </button>\n                                                </div>\n                                                <div className=\"modal-body\">\n                                                    <form>\n                                                        <div className=\"form-user-name\"><br/>\n                                                            <label className=\"label-name\">Имя пользователя</label><br/>\n                                                            <input type=\"text\" className=\"form-control\" id=\"name\"\n                                                                   value={this.state.name}\n                                                                   onChange={this.handleChange}\n                                                                   placeholder=\"Введите имя\"/>\n                                                        </div>\n                                                        <div className=\"form-user-age\"><br/>\n                                                            <label className=\"label-age\">Возраст</label><br/>\n                                                            <input type=\"text\" className=\"form-control\" id=\"age\"\n                                                                   value={this.state.age}\n                                                                   onChange={this.handleChange}\n                                                                   placeholder=\"Введите возраст\"/>\n                                                        </div>\n                                                        <br/>\n                                                        <div className=\"form-user-country\">\n                                                            <label className=\"label-country\">Страна</label><br/>\n                                                            <input type=\"text\" className=\"form-control\" id=\"country\"\n                                                                   value={this.state.country}\n                                                                   onChange={this.handleChange}\n                                                                   placeholder=\"Введите страну\"/>\n                                                        </div>\n                                                        <br/>\n                                                    </form>\n                                                </div>\n                                                <div className=\"modal-footer\">\n                                                    <button type=\"button\" className=\"btn btn-secondary\"\n                                                            data-dismiss=\"modal\"\n                                                            id=\"btn-create-user-cancel\">Отмена\n                                                    </button>\n                                                    <button type=\"button\" className=\"btn btn-primary\"\n                                                            id=\"btn-update-user\" data-dismiss=\"modal\"\n                                                            onClick={() => handleUpdateUser(user.id)}>Редактировать\n                                                    </button>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className=\"delete-user-icon\">\n                                    <ion-icon name=\"close\" id=\"delete-user-icon\"\n                                              onClick={() => handleDeleteUser(user.id)}/>\n                                </div>\n                            </td>\n                        </tr>\n                    }))\n                    }\n                    <tr>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: url => dispatch(usersFetchData(url))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersListTable);\n","import React from 'react';\nimport form from \"@jest/fake-timers/build/jestFakeTimers\";\nimport ReloadPage from \"./components/ReloadPage\";\n\nclass UsersCreateForm extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            name: '',\n            age: '',\n            country: '',\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleCancelReset = this.handleCancelReset.bind(this);\n    }\n\n    handleChange(event) {\n        let target = event.target;\n        let value = target.value;\n        let id = target.id;\n        this.setState({\n            [id]: value\n        });\n        this.setState({\n            id: event.target.value\n        });\n    }\n\n    handleSubmit() {\n        fetch('http://localhost:8080/users/',\n            {\n                method: 'POST',\n                mode: 'no-cors',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    name: this.state.name,\n                    age: this.state.age,\n                    country: this.state.country\n                })\n            }\n        ).then(result => result.json()).then(data => console.log(data)).catch(err => console.log(err));\n        this.setState({\n            name: '',\n            age: '',\n            country: '',\n        });\n        ReloadPage.handleList();\n    }\n\n    handleCancelReset() {\n        this.setState({\n            name: '',\n            age: '',\n            country: '',\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"users-create-form\">\n                <div className=\"button-user-create\">\n                    <button type=\"button\" className=\"btn btn-primary\" id=\"create-user-btn\" data-toggle=\"modal\"\n                            data-target=\"#create-user-modal\"\n                            data-whatever=\"create-user\">Добавить пользователя\n                    </button>\n                </div>\n\n                <div className=\"modal fade\" id=\"create-user-modal\" tabIndex=\"-1\" role=\"dialog\"\n                     aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n                    <div className=\"modal-dialog\" role=\"document\">\n                        <div className=\"modal-content\">\n                            <div className=\"modal-header\">\n                                <h5 className=\"modal-title\" id=\"exampleModalLabel\">Создать пользователя</h5>\n                                <button type=\"button\" className=\"close\" id=\"create-close-cross\" data-dismiss=\"modal\"\n                                        aria-label=\"Close\" onClick={this.handleCancelReset}>\n                                    <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                            </div>\n                            <div className=\"modal-body\">\n                                <form>\n                                    <div className=\"form-user-name\"><br/>\n                                        <label className=\"label-name\">Имя пользователя</label><br/>\n                                        <input type=\"text\" className=\"form-control\" id=\"name\" value={this.state.name}\n                                               onChange={this.handleChange}\n                                               placeholder=\"Введите имя\"/>\n                                    </div>\n                                    <div className=\"form-user-age\"><br/>\n                                        <label className=\"label-age\">Возраст</label><br/>\n                                        <input type=\"text\" className=\"form-control\" id=\"age\" value={this.state.age}\n                                               onChange={this.handleChange}\n                                               placeholder=\"Введите возраст\"/>\n                                    </div>\n                                    <br/>\n                                    <div className=\"form-user-country\">\n                                        <label className=\"label-country\">Страна</label><br/>\n                                        <input type=\"text\" className=\"form-control\" id=\"country\"\n                                               value={this.state.country} onChange={this.handleChange}\n                                               placeholder=\"Введите страну\"/>\n                                    </div>\n                                    <br/>\n                                </form>\n                            </div>\n                            <div className=\"modal-footer\">\n                                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\"\n                                        id=\"btn-create-user-cancel\" onClick={this.handleCancelReset}>Отмена\n                                </button>\n                                <button type=\"button\" className=\"btn btn-primary\" id=\"btn-create-user\"\n                                        data-dismiss=\"modal\"\n                                        onClick={this.handleSubmit}>Создать\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UsersCreateForm;\n","import React from 'react';\nimport banner from './images/banner.jpg';\nimport { Link } from \"react-scroll\";\n\nclass UsersBanner extends React.Component {\n\n    render() {\n\n        return (\n            <div className=\"header\">\n                <div className=\"header__banner-container\">\n                    <img className=\"header__banner-image\" src={banner} width=\"960\" height=\"637\"\n                         alt=\"Фоновое изображение\"/>\n                </div>\n                <div className=\"header__banner-image-shadow-glass\"/>\n                <h2 className=\"header__head-first-text\">In this place will be located the main text</h2>\n                <p className=\"header__line-top\">______________________________________________________________________</p>\n                <p className=\"header__line-bottom\">______________________________________________________________________</p>\n                <h3 className=\"header__head-second-text\">This place is for subtitle text</h3>\n                <Link className=\"header__button-scroll-to\" activeClass=\"active\" smooth={true} offset={-70}\n                      duration= {800} to=\"header__to-body-link\" href={\"#header__to-body-link\"}>Подробнее...</Link>\n                <a id=\"header__to-body-link\"/>\n            </div>\n        );\n    }\n}\n\nexport default UsersBanner;\n","import React from 'react';\nimport '../containers/App.css';\nimport {connect} from \"react-redux\"\nimport {usersFetchData} from \"../actions/users.js\";\nimport UsersListTable from \"../UsersListTable\";\nimport UsersCreateForm from \"../UsersCreateForm\";\nimport UsersBanner from \"../UsersBanner\";\n\n/*import {connectTo} from '../ws/ws'*/\n\n\nclass App extends React.Component {\n    componentDidMount() {\n        this.props.fetchData(\"http://localhost:8080/users\");\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"header-users\">\n                    <UsersBanner/>\n                </div>\n                <div className=\"list-users\">\n                    <UsersListTable/>\n                </div>\n                <div className=\"create-user\">\n                    <UsersCreateForm/>\n                </div>\n            </div>\n        );\n    }\n}\n\n/*connectTo();*/\n\nconst mapStateToProps = (state) => {\n    return {\n        users: state.users\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchData: url => dispatch(usersFetchData(url))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport { users } from \"./users\";\n\nconst rootReducer = combineReducers({\n    users\n});\n\nexport default rootReducer;","export function users(state = [], action) {\n    if (action.type === \"USERS_FETCH_DATA_SUCCESS\") {\n        return action.users;\n    } else {\n        return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/containers/App.js';\nimport * as serviceWorker from '../src/serviceWorker';\n\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\nimport {composeWithDevTools} from \"redux-devtools-extension\";\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nif (module.hot) {\n    module.hot.accept('../src/containers/App.js', () => {\n        ReactDOM.render(<App/>, document.getElementById('root'));\n    });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/banner.114933ae.jpg\";"],"sourceRoot":""}